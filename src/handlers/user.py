from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import load_config

config = load_config()
ADMIN_ID = int(config.tg_bot.admin_id)

async def cmd_start(message: types.Message, db=None):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        await db.update_user_status(user_id, "approved")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    user = await db.get_user(user_id)
    
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user_id}")
        )
        
        await message.bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"Username: @{message.from_user.username}",
            reply_markup=markup
        )
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user['status'] == 'approved':
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        elif user['status'] == 'blocked':
            reason = user['blocked_reason'] or '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            await message.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")

async def process_callback(callback: types.CallbackQuery, db=None):
    action, user_id = callback.data.split('_')
    user_id = int(user_id)
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞
    if user_id == ADMIN_ID and action == "block":
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    if action == "approve":
        await db.update_user_status(user_id, "approved")
        await callback.bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!")
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
        )
    elif action == "block":
        await db.update_user_status(user_id, "blocked", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await callback.bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É.")
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
        )

    await callback.answer()

async def cmd_users(message: types.Message, db=None):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_users_by_status()
    
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
        if user['user_id'] == ADMIN_ID:
            continue
            
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'blocked': '‚ùå'
        }.get(user['status'], '‚ùì')
        
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if user['status'] == 'approved':
            markup.add(InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}"))
        elif user['status'] == 'blocked':
            markup.add(InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"))
        else:  # pending
            markup.add(
                InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"),
                InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}")
            )

        user_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ Username: @{user['username']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {user['status']}\n"
        )
        
        if user['status'] == 'blocked' and user['blocked_reason']:
            user_text += f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {user['blocked_reason']}\n"

        await message.answer(user_text, reply_markup=markup)

async def cmd_pending(message: types.Message, db=None):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    users = await db.get_users_by_status('pending')
    
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    for user in users:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"),
            InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}")
        )

        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ Username: @{user['username']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
            reply_markup=markup
        )

def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, Command("start"))
    dp.register_message_handler(cmd_users, Command("users"))
    dp.register_message_handler(cmd_pending, Command("pending"))
    dp.register_callback_query_handler(
        process_callback,
        lambda c: c.data.startswith(('approve_', 'block_'))
    )