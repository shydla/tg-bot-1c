from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import load_config
from ssh_manager import SSHManager

config = load_config()
ADMIN_ID = int(config.tg_bot.admin_id)

async def cmd_start(message: types.Message, db=None):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        await db.update_user_status(user_id, "approved")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    user = await db.get_user(user_id)
    
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user_id}")
        )
        
        await message.bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {message.from_user.full_name}\n"
            f"Username: @{message.from_user.username}",
            reply_markup=markup
        )
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user['status'] == 'approved':
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.")
        elif user['status'] == 'blocked':
            reason = user['blocked_reason'] or '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            await message.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")

async def process_callback(callback: types.CallbackQuery, db=None):
    action, user_id = callback.data.split('_')
    user_id = int(user_id)
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞
    if user_id == ADMIN_ID and action == "block":
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    if action == "approve":
        await db.update_user_status(user_id, "approved")
        await callback.bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!")
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
        )
    elif action == "block":
        await db.update_user_status(user_id, "blocked", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await callback.bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É.")
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
        )

    await callback.answer()

async def cmd_users(message: types.Message, db=None):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_users_by_status()
    
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
        if user['user_id'] == ADMIN_ID:
            continue
            
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'blocked': '‚ùå'
        }.get(user['status'], '‚ùì')
        
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if user['status'] == 'approved':
            markup.add(InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}"))
        elif user['status'] == 'blocked':
            markup.add(InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"))
        else:  # pending
            markup.add(
                InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"),
                InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}")
            )

        user_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ Username: @{user['username']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {user['status']}\n"
        )
        
        if user['status'] == 'blocked' and user['blocked_reason']:
            user_text += f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {user['blocked_reason']}\n"

        await message.answer(user_text, reply_markup=markup)

async def cmd_pending(message: types.Message, db=None):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª –≤ –æ–∏–¥–∞–Ω–∏–∏
    users = await db.get_users_by_status('pending')
    
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    for user in users:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user['user_id']}"),
            InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user['user_id']}")
        )

        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ Username: @{user['username']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
            reply_markup=markup
        )

async def cmd_databases(message: types.Message, db=None):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or user['status'] != 'approved':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    config = load_config()
    ssh = SSHManager(
        host=config.ssh.host,
        username=config.ssh.username,
        password=config.ssh.password,
        db_server=config.ssh.db_server,
        db_user=config.ssh.db_user,
        db_pwd=config.ssh.db_pwd,
        user=config.ssh.user,
        user_pwd=config.ssh.user_pwd,
        rclone_remote=config.ssh.rclone_remote,
        rclone_path=config.ssh.rclone_path
    )

    try:
        databases = await ssh.get_1c_databases()
        if not databases:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
            return

        markup = InlineKeyboardMarkup(row_width=1)
        active_backups_msg = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        for db_info in databases:
            db_name = db_info['name']
            db_descr = db_info.get('descr', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"üíæ {db_name}  - "
            if db_descr:
                button_text += f"üìù ({db_descr})"

            if SSHManager.is_backup_active(db_name):
                markup.add(InlineKeyboardButton(
                    text=f"üîÑ {button_text} (–≤—ã–≥—Ä—É–∑–∫–∞...)",
                    callback_data="backup_in_progress"
                ))
                active_backups_msg.append(db_name)
            else:
                markup.add(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"backup_{db_name}"
                ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        markup.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="backup_cancel"
        ))

        msg_text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:"
        if active_backups_msg:
            msg_text += f"\n\n‚ö†Ô∏è –í—ã–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥–µ—Ç –¥–ª—è –±–∞–∑: {', '.join(active_backups_msg)}"

        await message.answer(msg_text, reply_markup=markup)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑: {str(e)}")
    finally:
        await ssh.close()

async def process_backup_callback(callback: types.CallbackQuery, db=None):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if callback.data == "backup_cancel":
        await callback.message.delete()
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if callback.data == "backup_in_progress":
        await callback.answer("–í—ã–≥—Ä—É–∑–∫–∞ —ç—Ç–æ–π –±–∞–∑—ã —É–∂–µ –∏–¥–µ—Ç!", show_alert=True)
        return

    user = await db.get_user(callback.from_user.id)
    
    if not user or user['status'] != 'approved':
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return

    db_name = callback.data.split('_')[1]

    if SSHManager.is_backup_active(db_name):
        await callback.answer("–í—ã–≥—Ä—É–∑–∫–∞ —ç—Ç–æ–π –±–∞–∑—ã —É–∂–µ –∏–¥–µ—Ç!", show_alert=True)
        return

    await callback.answer(f"–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã {db_name}...", show_alert=False)

    config = load_config()
    ssh = SSHManager(
        host=config.ssh.host,
        username=config.ssh.username,
        password=config.ssh.password,
        db_server=config.ssh.db_server,
        db_user=config.ssh.db_user,
        db_pwd=config.ssh.db_pwd,
        user=config.ssh.user,
        user_pwd=config.ssh.user_pwd,
        rclone_remote=config.ssh.rclone_remote,
        rclone_path=config.ssh.rclone_path
    )

    try:
        await callback.message.delete()
        status_message = await callback.message.answer(
            f"üîÑ –ù–∞—á–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã {db_name}...\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        cloud_link = await ssh.create_database_backup(db_name)
        if cloud_link:
            await status_message.edit_text(
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã {db_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üì• –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:\n{cloud_link}\n\n"
                f"‚ÑπÔ∏è –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"
            )
        else:
            await status_message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã {db_name} "
                f"–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë –≤ –æ–±–ª–∞–∫–æ"
            )

    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await ssh.close()

def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, Command("start"))
    dp.register_message_handler(cmd_users, Command("users"))
    dp.register_message_handler(cmd_pending, Command("pending"))
    dp.register_message_handler(cmd_databases, Command("backup"))
    dp.register_callback_query_handler(
        process_callback,
        lambda c: c.data.startswith(('approve_', 'block_'))
    )
    dp.register_callback_query_handler(
        process_backup_callback,
        lambda c: c.data.startswith('backup_')
    )